#+STARTUP: overview

[[https://necromuralist.github.io/posts/org-babel-cheat-sheet/][Org Babel Cheatsheet]]
[[https://org-babel.readthedocs.io/en/latest/eval/][Org Babel Reference Card]]
[[https://github.com/dfeich/org-babel-examples][Org Babel Examples]]

* Exec path from shell
#+begin_src emacs-lisp :results output silent
(use-package exec-path-from-shell
  :if (not (eq system-type 'windows-nt))
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Sudoedit
#+begin_src emacs-lisp :results output silent
(use-package sudo-edit
  :commands sudo-edit)
#+end_src

* Gptel
#+begin_src emacs-lisp :results output silent
(use-package gptel
  :ensure t ;; override :general
  :custom
  ;; prompts are under `gptel-directives'
  ;; (gptel-model "gpt-4-1106-preview")
  (gptel-display-buffer-action '(display-buffer-same-window))
  :general
  (gptel-mode-map
   "C-<return>" #'(lambda () (interactive)
                    (goto-char (point-max))
                    (gptel-send))
   "C-c RET" nil)
  :hook
  (gptel-mode-hook . (lambda ()
                       (visual-line-mode 1)
                       (require 'visual-fill-column)
                       (visual-fill-column-mode 1)))
  :init
  (evil-ex-define-cmd "gptt" #'gptel-menu)
  (with-eval-after-load 'evil
    (--evil-define-splits "gpt" 'gptel)))
#+end_src

* Jam-mode
#+begin_src emacs-lisp :results output silent
(use-package jam-mode
  :ensure nil
  :mode "Jamroot"
  :load-path "lisp/3p")
#+end_src

* Buttercup                                                         :testing:
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/writing-tests.md
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/running-tests.md

#+begin_src emacs-lisp :results output silent
(use-package buttercup)
#+end_src

* ll-debug
#+begin_src emacs-lisp :results output silent
(use-package ll-debug
  :commands ll-debug-insert
  :custom
  (ll-debug-output-prefix "DEBUG-pangt-")
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "dp" #'ll-debug-insert)))
#+end_src

* Stripe
Zebra patterns for buffer
#+begin_src emacs-lisp :results output silent
(use-package stripe-buffer
  :commands stripe-buffer-mode)
#+end_src

* Dogears
#+begin_src emacs-lisp :results output silent
(use-package dogears
  :disabled t
  :demand t
  :commands (dogears-list dogears-remember dogears-go)
  :general
  (dogears-list-mode-map
   :states 'normal
   "RET" 'dogears-list-go
   "d d" 'dogears-list-delete)
  :init
  (evil-ex-define-cmd "fa" 'dogears-list)
  (evil-ex-define-cmd "fr" 'dogears-remember)
  (evil-ex-define-cmd "ff" 'dogears-go)
  (evil-ex-define-cmd "fn" 'dogears-forward)
  (evil-ex-define-cmd "fp" 'dogears-back)

  :config
  (dogears-mode)

  (when savehist-mode
    (add-to-list 'savehist-additional-variables 'dogears-list))

  ;; places to remember
  (add-to-list 'dogears-hooks 'xref-after-jump-hook)
  (add-to-list 'dogears-hooks 'bookmark-after-jump-hook)
  (add-to-list 'dogears-functions 'set-marker))
#+end_src

* Focus
#+begin_src emacs-lisp :results output silent
(use-package focus
  :commands focus-mode
  :init
  (with-eval-after-load 'evil
    ;; (evil-define-command --focus-maybe-pin (pin)
    ;;   (interactive "<!>")
    ;;   (focus-mode 1)
    ;;   (when pin (focus-pin)))
    ;; (evil-ex-define-cmd "foc[us]" '--focus-maybe-pin)
    (evil-ex-define-cmd "fo[cus]" 'focus-mode)
    (evil-ex-define-cmd "fou" 'focus-unpin)
    (evil-ex-define-cmd "fop" 'focus-pin))
  (with-eval-after-load 'embark
    (with-eval-after-load 'general
      (general-define-key
       :keymaps 'embark-defun-map
        "f f" 'focus-mode
        "f u" 'focus-unpin
        "f p" 'focus-pin))))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package lsp-focus
  :ensure t
  :after (lsp focus)
  :hook
  (focus-mode-hook . #'lsp-focus-mode))
#+end_src

* Ace-window
#+begin_src emacs-lisp :results output silent
(use-package ace-window
  :after evil
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :general
  (evil-window-map
   "SPC" 'ace-window))
#+end_src

* Pomm
#+begin_src emacs-lisp :results output silent
(use-package pomm
  :ensure t
  :commands (pomm
             pomm-start-with-context
             pomm-third-time
             pomm-third-time-start-with-context)
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "timer" 'pomm)))
#+end_src
