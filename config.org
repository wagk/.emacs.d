#+STARTUP: overview

[[https://necromuralist.github.io/posts/org-babel-cheat-sheet/][Org Babel Cheatsheet]]
[[https://org-babel.readthedocs.io/en/latest/eval/][Org Babel Reference Card]]
[[https://github.com/dfeich/org-babel-examples][Org Babel Examples]]

* Dockerfile mode
#+begin_src emacs-lisp :results output silent
(use-package dockerfile-mode)
#+end_src

* mmm-mode
#+begin_src emacs-lisp :results output silent
(use-package mmm-mode
  :custom-face
  (mmm-default-submode-face ((t (:background unspecified)))))
#+end_src

* ObjC
#+begin_src emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
#+end_src

* Typescript
#+begin_src emacs-lisp :results output silent
(use-package typescript-mode
  :mode "\\.ts\\'"
  :config
  (with-eval-after-load 'tree-sitter
    (add-hook 'typescript-mode-hook 'tree-sitter-hl-mode)))
#+end_src

* Mermaid
Requires =mermaid-cli= to be installed:
#+begin_src sh
npm install -g @mermaid-js/mermaid-cli
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package mermaid-mode
  :if (and (bound-and-true-p --mermaid-cli-bin)
           (f-exists-p --mermaid-cli-bin))
  :custom
  (mermaid-mmdc-location --mermaid-cli-bin)
  :commands (mermaid-mode)
  :init
  (with-eval-after-load 'markdown-mode
    (add-to-list 'markdown-code-lang-modes '("mermaid" . mermaid-mode))))
#+end_src

** Ob-Mermaid
#+begin_src emacs-lisp :results output silent
(use-package ob-mermaid
  :after org
  :if (and (bound-and-true-p --mermaid-cli-bin)
           (f-exists-p --mermaid-cli-bin))
  :custom
  (ob-mermaid-cli-path --mermaid-cli-bin))
#+end_src

* Svg Tag Mode
#+begin_src emacs-lisp :results output silent
(use-package svg-lib
  :ensure (:host github :repo "rougier/svg-lib"))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package svg-tag-mode
   ;; depends on `svg-lib'
  :after svg-lib)
#+end_src

* Term
** Multi-Term
#+begin_src emacs-lisp :results output silent
(use-package multi-term
  :if (not (or (featurep 'vterm)
               (featurep 'multi-vterm)
               (eq system-type 'windows-nt)))
  :commands
  (multi-term))
#+end_src

* Vterm
https://github.com/akermu/emacs-libvterm

Ensure that `libtool` is installed. On Ubuntu this can be done via
`libtool-bin`.

#+begin_src emacs-lisp :results output silent
(use-package vterm
  :if (not (eq system-type 'windows-nt))
  :after evil
  :custom
  (vterm-max-scrollback 100000 "maximum allowed without editing source file.")
  (vterm-always-compile-module t)
  :config
  (evil-ex-define-cmd "term" #'vterm))
#+end_src

** Multi-Vterm
#+begin_src emacs-lisp :results output silent
(use-package multi-vterm
  :after (vterm general evil)
  :if (not (eq system-type 'windows-nt))
  :general
  (general-define-key
   :keymaps 'project-prefix-map
   "s" 'multi-vterm-project) ;; overrides `project-shell'
  :config
  (evil-ex-define-cmd "term" #'multi-vterm))
#+end_src

* Kotlin Mode
#+begin_src emacs-lisp :results output silent
(use-package kotlin-mode
  :mode ("\\.kt\\'" . kotlin-mode))
#+end_src

* Swift Mode
#+begin_src emacs-lisp :results output silent
(use-package swift-mode
  :mode ("\\.swift\\'" . swift-mode))
#+end_src

* Shortdoc
#+begin_src emacs-lisp :results output silent
(when (fboundp 'shortdoc)
  (evil-ex-define-cmd "cheatsheet" 'shortdoc)
  (evil-ex-define-cmd "cs" 'shortdoc))
#+end_src

* dwim shell command
#+begin_src emacs-lisp :results output silent
(use-package dwim-shell-command
  :ensure (:host github :repo "xenodium/dwim-shell-command"))
#+end_src

* Earthfile
#+begin_src emacs-lisp :results output silent
(use-package earthfile-mode)
#+end_src

* Asciidoc
#+begin_src emacs-lisp :results output silent
(use-package adoc-mode)
#+end_src

* Scopeline
#+begin_src emacs-lisp :results output silent
(use-package scopeline
  :ensure (:host github :repo "meain/scopeline.el" :branch "master")
  :hook (prog-mode-hook . scopeline-mode)
  :blackout t
  :custom
  (scopeline-overlay-prefix " -- ")
  (scopeline-min-lines 0))
#+end_src

* Consult-Notes
#+begin_src emacs-lisp :results output silent
(use-package consult-notes
  :disabled t
  :after consult
  :if (bound-and-true-p --notes-folder)
  :commands
  (consult-notes
   consult-notes-search-in-all-notes)
  :custom
  (consult-notes-file-dir-sources
   `(("Deft" ?d ,--notes-folder)))
  :init
  (--evil-ex-define-cmds-splits-and-tabs
   "nn"
   #'consult-notes
   #'(lambda () (consult-notes))))
#+end_src

* Obsidian.el
#+begin_src emacs-lisp :results output silent
(use-package obsidian
  :custom
  (obsidian-include-hidden-files nil)
  (obsidian-links-use-vault-path t)
  ;; :hook
  ;; (obsidian-mode-hook . (lambda ()
  ;;                         (when (featurep 'aggressive-fill-paragraph)
  ;;                           (aggressive-fill-paragraph-mode 0))
  ;;                         (require 'visual-fill-column)
  ;;                         (visual-fill-column-mode 1)
  ;;                         (visual-line-mode 1)))
  :config
  ;; don't forget to `obsidian-specify-path'
  (global-obsidian-mode)
  (cl-defun --obsidian-find-buffer ()
    (interactive)
    (cl-letf ((symbol-function 'find-file) (symbol-function 'find-file-noselect))
      (obsidian-jump)))
  ;; (--evil-ex-define-cmds-splits-and-tabs
  ;;  "nn"
  ;;  #'obsidian-jump
  ;;  #'(lambda () (obsidian-jump)))
  (evil-ex-define-cmd "ni" #'obsidian-insert-link))
  ;; (with-eval-after-load 'org-capture
  ;;   (setq org-capture-templates
  ;;         (doct-add-to org-capture-templates
  ;;                      '("Obsidian append"
  ;;                        :keys "c"
  ;;                        :type plain
  ;;                        :function (lambda ()
  ;;                                    (let ((buffer(->> (obsidian-list-all-files)
  ;;                                                      (--completing-read "File: ")
  ;;                                                      (find-file-noselect))))
  ;;                                      (with-current-buffer buffer
  ;;                                        (goto-char (point-max)))))
  ;;                        :template "\n")))
#+end_src

* Chatgpt Shell
Don't forget to set =chatgpt-shell-openai-key= somewhere.

#+begin_src emacs-lisp :results output silent
(use-package chatgpt-shell
  :disabled t
  :ensure (:host github :repo "xenodium/chatgpt-shell")
  :after (dash)
  :commands chatgpt-shell-prompt
  :general
  (chatgpt-shell-mode-map
   "RET" nil
   "C-<return>" 'comint-send-input)
  :custom
  (chatgpt-shell-request-timeout 300)
  (chatgpt-shell-insert-queries-inline nil)
  (chatgpt-shell-history-path no-littering-var-directory)
  (chatgpt-shell-display-function
   #'(lambda (buf)
       (pop-to-buffer buf #'display-buffer-pop-up-window)))
  (chatgpt-shell-prompt-query-response-style 'shell)
  :hook
  (chatgpt-shell-mode-hook . (lambda ()
                               (when (bound-and-true-p parinfer-rust-mode)
                                 (parinfer-rust-mode 0))))
  :config
  (setq chatgpt-shell-system-prompt
        (-find-index (lambda (elem)
                       (string-equal "Programming" (car elem)))
                     chatgpt-shell-system-prompts))
  (setq chatgpt-shell-model-version
        (-find-index (lambda (elem)
                       (string-equal "gpt-4-turbo-preview" elem))
                     chatgpt-shell-model-versions))
  (setq chatgpt-shell-welcome-function
        #'(lambda (config)
            "Adapted from `shell-maker-welcome-function'"
           (format
            "Welcome to %s shell\n\n  Type %s and press %s for details.\n\n"
            (propertize (shell-maker-config-name config)
                        'font-lock-face 'font-lock-comment-face)
            (propertize "help" 'font-lock-face 'italic)
            (shell-maker--propertize-key-binding "-shell-submit" config))))
  :init
  (evil-define-command --evil-gpt-cmd (prompt)
    (interactive "<a>")
    (require 'chatgpt-shell)
    (if prompt
        (chatgpt-shell-send-to-buffer prompt)
      (chatgpt-shell)))
  (evil-ex-define-cmd "gpt" #'--evil-gpt-cmd))
#+end_src

* COMMENT Democratize (documentation)
Commented because this doesn't work all too well for now and I'm not to sure
what the benefits are.
#+begin_src emacs-lisp :results output silent
(use-package xht
  :ensure (:type git :host nil :repo "https://git.sr.ht/~flandrew/xht"))

(use-package democratize
  :ensure (:type git :host nil :repo "https://git.sr.ht/~flandrew/democratize")
  :config
  (with-eval-after-load 'helpful
    (democratize-enable-examples-in-helpful))
  (democratize-enable-examples-in-help))
#+end_src

* Jinx (spell-checking)
#+begin_src emacs-lisp :results output silent
(use-package jinx
  :custom (jinx-languages "en_US"))
#+end_src

* Exec path from shell
#+begin_src emacs-lisp :results output silent
(use-package exec-path-from-shell
  :if (not (eq system-type 'windows-nt))
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Sudoedit
#+begin_src emacs-lisp :results output silent
(use-package sudo-edit
  :commands sudo-edit)
#+end_src

* Gptel
#+begin_src emacs-lisp :results output silent
(use-package gptel
  :ensure t ;; override :general
  :custom
  ;; prompts are under `gptel-directives'
  ;; (gptel-model "gpt-4-1106-preview")
  (gptel-display-buffer-action '(display-buffer-same-window))
  :general
  (gptel-mode-map
   "C-<return>" #'(lambda () (interactive)
                    (goto-char (point-max))
                    (gptel-send))
   "C-c RET" nil)
  :hook
  (gptel-mode-hook . (lambda ()
                       (visual-line-mode 1)
                       (require 'visual-fill-column)
                       (visual-fill-column-mode 1)))
  :init
  (evil-ex-define-cmd "gptt" #'gptel-menu)
  (with-eval-after-load 'evil
    (--evil-define-splits "gpt" 'gptel)))
#+end_src

* Jam-mode
#+begin_src emacs-lisp :results output silent
(use-package jam-mode
  :ensure nil
  :mode "Jamroot"
  :load-path "lisp/3p")
#+end_src

* Buttercup                                                         :testing:
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/writing-tests.md
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/running-tests.md

#+begin_src emacs-lisp :results output silent
(use-package buttercup)
#+end_src

* ll-debug
#+begin_src emacs-lisp :results output silent
(use-package ll-debug
  :commands ll-debug-insert
  :custom
  (ll-debug-output-prefix "DEBUG-pangt-")
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "dp" #'ll-debug-insert)))
#+end_src

* Stripe
Zebra patterns for buffer
#+begin_src emacs-lisp :results output silent
(use-package stripe-buffer
  :commands stripe-buffer-mode)
#+end_src

* Dogears
#+begin_src emacs-lisp :results output silent
(use-package dogears
  :disabled t
  :demand t
  :commands (dogears-list dogears-remember dogears-go)
  :general
  (dogears-list-mode-map
   :states 'normal
   "RET" 'dogears-list-go
   "d d" 'dogears-list-delete)
  :init
  (evil-ex-define-cmd "fa" 'dogears-list)
  (evil-ex-define-cmd "fr" 'dogears-remember)
  (evil-ex-define-cmd "ff" 'dogears-go)
  (evil-ex-define-cmd "fn" 'dogears-forward)
  (evil-ex-define-cmd "fp" 'dogears-back)

  :config
  (dogears-mode)

  (when savehist-mode
    (add-to-list 'savehist-additional-variables 'dogears-list))

  ;; places to remember
  (add-to-list 'dogears-hooks 'xref-after-jump-hook)
  (add-to-list 'dogears-hooks 'bookmark-after-jump-hook)
  (add-to-list 'dogears-functions 'set-marker))
#+end_src

* Focus
#+begin_src emacs-lisp :results output silent
(use-package focus
  :commands focus-mode
  :init
  (with-eval-after-load 'evil
    ;; (evil-define-command --focus-maybe-pin (pin)
    ;;   (interactive "<!>")
    ;;   (focus-mode 1)
    ;;   (when pin (focus-pin)))
    ;; (evil-ex-define-cmd "foc[us]" '--focus-maybe-pin)
    (evil-ex-define-cmd "fo[cus]" 'focus-mode)
    (evil-ex-define-cmd "fou" 'focus-unpin)
    (evil-ex-define-cmd "fop" 'focus-pin))
  (with-eval-after-load 'embark
    (with-eval-after-load 'general
      (general-define-key
       :keymaps 'embark-defun-map
        "f f" 'focus-mode
        "f u" 'focus-unpin
        "f p" 'focus-pin))))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package lsp-focus
  :ensure t
  :after (lsp focus)
  :hook
  (focus-mode-hook . #'lsp-focus-mode))
#+end_src

* Ace-window
#+begin_src emacs-lisp :results output silent
(use-package ace-window
  :after evil
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :general
  (evil-window-map
   "SPC" 'ace-window))
#+end_src

* Pomm
#+begin_src emacs-lisp :results output silent
(use-package pomm
  :ensure t
  :commands (pomm
             pomm-start-with-context
             pomm-third-time
             pomm-third-time-start-with-context)
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "timer" 'pomm)))
#+end_src
