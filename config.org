#+STARTUP: overview

[[https://necromuralist.github.io/posts/org-babel-cheat-sheet/][Org Babel Cheatsheet]]
[[https://org-babel.readthedocs.io/en/latest/eval/][Org Babel Reference Card]]
[[https://github.com/dfeich/org-babel-examples][Org Babel Examples]]

* JSON                                                                :major:
#+begin_src emacs-lisp :results output silent
(use-package json-mode
  :ensure (:host github :repo "joshwnj/json-mode")
  :mode "\\.json\\'"
  :commands (json-mode)
  :init
  (with-eval-after-load 'org-src
    (cl-pushnew '("json" . json) org-src-lang-modes)))
#+end_src

** Json Snatcher
#+begin_src emacs-lisp :results output silent
(use-package json-snatcher
  :commands (jsons-print-path))
#+end_src

* YAML
https://github.com/zkry/yaml.el/tree/9ebddb55238d746dc5a5d46db04c9f360c140b99
#+begin_src emacs-lisp :results output silent
(use-package yaml
  :commands (yaml-parse-string))
#+end_src

* C++
** Indentation of 4
#+begin_src emacs-lisp :results output silent
(setq-default c-basic-offset 4)

(with-eval-after-load 'c-ts-mode
  (setq c-ts-mode-indent-offset 4))
#+end_src

** Default to K&R style
#+begin_src emacs-lisp :results output silent
(with-eval-after-load 'cc-mode
  (cl-dolist (mode '(c-mode c++-mode))
    (add-to-list 'c-default-style `(,mode . "k&r"))))
#+end_src

** Newline in comments should insert an indented comment
#+begin_src emacs-lisp :results output silent
(general-define-key :states 'insert
                    :keymaps 'c-mode-base-map
                    "C-<return>" 'comment-indent-new-line)
#+end_src

** Treat .h files as cpp files
#+begin_src emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src

** Treat .hpp files as cpp files
#+begin_src emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-mode))
#+end_src

** cpp-specific ligatures
We do not support =&&= (and hence also =||=) because of conflicts with
r-value references.
#+begin_src emacs-lisp :results output silent
(add-hook 'c-mode-common-hook
          #'(lambda ()
              (mapc (lambda (pair) (push pair prettify-symbols-alist))
                    '(("!=" . #x2260)
                      ("!" . #xac)
                      ;; ("==" . #x2a75) ;; Not supported by Iosevka
                      ;; ("->" . #x27f6) ;; Not supported by Iosevka
                      ("->" . #x2192) ;; 1-char width version
                      ("<=" . #x2264)
                      (">=" . #x2265)))))
;; ("&&" . #x2227)
;; ("||" . #x2228)))))
#+end_src

** Patch in completion
#+begin_src emacs-lisp :results output silent
(with-eval-after-load 'cc-mode
  (cl-defun --c-indent-then-complete ()
    (interactive)
    (when (= 0 (c-indent-line-or-region))
      (completion-at-point)))
  (with-eval-after-load 'general
    (general-define-key
     :keymaps '(c-mode-map c++-mode-map)
      "<tab>" #'--c-indent-then-complete
      "TAB" "<tab>")))
#+end_src

** Clang Format
#+begin_src emacs-lisp :results output silent
(use-package clang-format
  :ensure (:host github :repo "emacsmirror/clang-format")
  :commands (clang-format-region
             clang-format-buffer
             clang-format)
  :general
  (c++-mode-map
   :states '(normal)
   "C-c C-f" 'my-evil-clang-format)
  (java-mode-map
   :states '(normal)
   "C-c C-f" 'my-evil-clang-format)
  :init
  (evil-define-operator my-evil-clang-format (beg end)
    (require 'clang-format)
    (clang-format beg end))
  (defun toggle-clang-format-on-save ()
    "Toggle clang-format-buffer on a per-buffer level."
    (interactive)
    (unless (boundp 'toggle-clang-format-on-save)
      (setq-local toggle-clang-format-on-save nil))
    (if (not toggle-clang-format-on-save)
        (progn (add-hook 'before-save-hook 'clang-format-buffer t t)
               (setq-local toggle-clang-format-on-save t)
               (message "toggle-clang-format-on-save t"))
      (remove-hook 'before-save-hook 'clang-format-buffer t)
      (setq-local toggle-clang-format-on-save nil)
      (message "toggle-clang-format-on-save nil")))
  :custom
  (clang-format-style-option "file"
                             "read from .clang-format"))
#+end_src

*** Clang-Format+
#+begin_src emacs-lisp :results output silent
(use-package clang-format+
  :commands clang-format+-mode)
#+end_src

** clang-capf
Requires `clang` to be installed (perhaps unsurprisingly).
#+begin_src emacs-lisp :results output silent
(use-package clang-capf
  :custom
  (clang-capf-ignore-case t)
  :config
  (add-hook 'c-mode-hook
            #'(lambda ()
                (add-hook 'completion-at-point-functions #'clang-capf nil t))))
#+end_src
* Beancount
It's a minor mode, much like how magit's commit mode is a minor mode
#+begin_src emacs-lisp :results output silent
(use-package beancount
  :ensure (:host github :repo "beancount/beancount-mode")
  :mode (("\\.beancount\\'" . beancount-mode)
         ("\\.ledger\\'" . beancount-mode))
  :init
  (defun my-beancount-insert-date ()
    "Does the same thing as `beancount-insert-date', but uses
`org-read-date' for more ergonomic date generation."
    (interactive)
    (unless (bolp) (newline)) ;; `beancount-insert-date' does this
    (insert (org-read-date) " "))
  ;; TODO: Add more from
  ;; `https://beancount.github.io/docs/beancount_language_syntax.html`
  (when (bound-and-true-p --default-ledger-file)
    (with-eval-after-load 'org-capture
      (setq org-capture-templates
            (doct-add-to
             org-capture-templates
             '(("Beancount"
                :keys "bean"
                ;; :contexts (:in-mode "beancount-mode")
                :type plain
                :file --default-ledger-file
                :unnarrowed t ;; critical for completion to function
                :empty-lines-before 1
                :children
                (("Today"
                  :keys "today"
                  :children
                  (("Open new account"
                    :keys "open"
                    :template
                    ("%<%Y-%m-%d> open %? %^{CURRENCY}"))
                   ("Transaction"
                    :keys "tx"
                    :template
                    ("%<%Y-%m-%d> * \"%^{VENDOR}\" \"%^{PURCHASE}\""
                     "  %?"))))
                 ("On Date"
                  :keys "date"
                  :date (lambda () (org-read-date))
                  :children
                  (("Open new account"
                    :keys "open"
                    :template
                    ("%{date} open %? %^{CURRENCY}"))
                   ("Transaction"
                    :keys "tx"
                    :template
                    ("%{date} * \"%^{VENDOR}\" \"%^{PURCHASE}\""
                     "  %?")))))))))))
  (--evil-ex-define-cmds-splits-and-tabs
   "ledger"
   #'(lambda () (interactive)
       (find-file --default-ledger-file)))
  :general
  (beancount-mode-map
   "M-RET" #'my-beancount-insert-date)
  :hook
  (beancount-mode-hook . outline-minor-mode)
  :config
  (with-eval-after-load 'org-src
    (cl-pushnew '("beancount" . beancount) org-src-lang-modes)))
;; :general
;; (beancount-mode-map
;;  :states '(normal motion insert)
;;  "<f5>" #'(lambda () (interactive)
;;            (insert (format-time-string "%Y-%m-%d"))))
;; causing fontification errors
;; :hook ((org-mode-hook . beancount-mode)))
#+end_src

* Groovy mode                                                         :major:
#+begin_src emacs-lisp :results output silent
(use-package groovy-mode
  :ensure (:host github :repo "Groovy-Emacs-Modes/groovy-emacs-modes")
  :mode (("\\.groovy\\'" . groovy-mode)
         ("\\Jenkinsfile\\'" . groovy-mode))
  :hook ((groovy-mode-hook . (lambda () (setq-local comment-start "// "))))
  :init
  (with-eval-after-load 'org-src
    (cl-pushnew '("groovy" . groovy) org-src-lang-modes)))
#+end_src

* Hy Mode                                                             :major:
#+begin_src emacs-lisp :results output silent
(use-package hy-mode
  :ensure (:host github :repo "hylang/hy-mode")
  :mode "\\.hy\\'"
  :general
  (hy-mode-map
   :states 'insert
   "RET" 'comment-indent-new-line)
  :hook ((hy-mode-hook . update-evil-shift-width)
         (hy-mode-hook . show-paren-mode))
  :init
  (with-eval-after-load 'org-src
    (cl-pushnew '("hy" . hy) org-src-lang-modes)))
#+end_src

** ob-hy
#+begin_src emacs-lisp :results output silent
(use-package ob-hy
  :ensure (:host github :repo "brantou/ob-hy")
  :after org-src)
#+end_src

* Batch/CMD
#+begin_src emacs-lisp :results output silent
(with-eval-after-load 'org-src
  (cl-pushnew '("cmd" . bat) org-src-lang-modes)
  (cl-pushnew '("batch" . bat) org-src-lang-modes))
#+end_src

* Python
#+begin_src emacs-lisp :results output silent
(org-babel-do-load-languages 'org-babel-load-languages
                             (add-to-list 'org-babel-load-languages '(python . t)))
#+end_src

#+begin_src emacs-lisp :results output silent
(setq-default python-indent-offset 4)

(general-define-key
 :keymaps 'python-mode-map
 :states 'insert
 "RET" 'comment-indent-new-line)
#+end_src

** Virtual Environment
#+begin_src emacs-lisp :results output silent
(use-package pyvenv
  :ensure (:host github :repo "jorgenschaefer/pyvenv")
  :commands (pyvenv-activate
             pyvenv-workon))
#+end_src

* Powershell
#+begin_src emacs-lisp :results output silent
(use-package powershell.el
  :ensure (:host github :repo "jschaf/powershell.el")
  :commands (powershell-mode powershell)
  :init
  (with-eval-after-load 'org-src
    (cl-pushnew '("powershell" . powershell) org-src-lang-modes)
    (cl-pushnew '("ps" . powershell) org-src-lang-modes))
  :config
  (defun org-babel-execute:powershell (body _params)
    (let ((explicit-shell-file-name powershell-location-of-exe))
      (shell-command-to-string body))))
#+end_src

* Yaml-mode
#+begin_src emacs-lisp :results output silent
(use-package yaml-mode
  :mode ("\\.yml\\'"
         "\\.yaml\\'")
  :hook
  (yaml-mode-hook . prism-whitespace-mode)
  (yaml-mode-hook . display-line-numbers-mode)
  :general
  (yaml-mode-map
   "RET" 'newline-and-indent)
  :commands (yaml-mode)
  :init
  (with-eval-after-load 'org-src
    (cl-pushnew '("yaml" . yaml) org-src-lang-modes)))
#+end_src

* Cmake
#+begin_src emacs-lisp :results output silent
(use-package cmake-mode
  :mode ("\\cmakelists.txt\\'" . cmake-mode)
  ;; :ensure t ;; the package is nested in the greater cmake repo, and
  ;;           ;; not practical to use straight on (yet)
  :hook (cmake-mode-hook . hl-todo-mode))
#+end_src

** Cmake-font-lock
#+begin_src emacs-lisp :results output silent
(use-package cmake-font-lock
  :hook (cmake-mode-hook . cmake-font-lock-activate))
#+end_src

* TOML mode for org-src
#+begin_src emacs-lisp :results output silent
(with-eval-after-load 'org-src
  (cl-pushnew '("toml" . conf-toml) org-src-lang-modes))
#+end_src

* Prettify Symbols Mode
Use this instead of pretty mode because it's built in and shouldn't
spaz out as much

#+begin_src emacs-lisp :results output silent
;; (global-prettify-symbols-mode)
#+end_src

* Studlify operator
#+begin_src emacs-lisp :results output silent
(evil-define-operator evil-studlify (beg end)
  (studlify-region beg end))
#+end_src

#+begin_src emacs-lisp :results output silent
(general-define-key :keymaps '(normal visual)
  "g S" 'evil-studlify)
#+end_src

Or evil-spongebob if you want to think of it that way.

* Go Mode                                                             :major:
#+begin_src emacs-lisp :results output silent
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :hook
  (go-mode-hook . gofmt-before-save)
  :general
  (:keymaps 'go-mode-map
   :state 'normal
   "C-c C-f C-f" 'gofmt))
#+end_src

* Info mode
#+begin_src emacs-lisp :results output silent
(general-define-key
 :keymaps 'Info-mode-map
 :states 'normal
 "f" 'link-hint-open-link
 "]]" 'Info-next
 "[[" 'Info-prev)
#+end_src

* Flycheck
#+begin_src emacs-lisp :results output silent
(use-package flycheck
  :ensure (:host github :repo "flycheck/flycheck")
  :custom
  (flycheck-indication-mode 'left-margin)
  ;; :custom-face
  ;; (flycheck-error ((t (:underline (:color ,sol-red :style line)))))
  ;; (flycheck-delimited-error ((t (:inherit flycheck-error))))
  ;; (flycheck-info ((t (:underline (:color ,sol-blue :style line)))))
  ;; (flycheck-warning ((t (:underline (:color ,sol-yellow :style line)))))
  ;; (flycheck-fringe-error ((((background light)) (:background ,sol-base3 :foreground ,sol-red))
  ;;                         (((background dark)) (:background ,sol-base03 :foreground ,sol-red))))
  ;; (flycheck-fringe-info ((((background light)) (:background ,sol-base3 :foreground ,sol-blue))
  ;;                        (((background dark)) (:background ,sol-base03 :foreground ,sol-blue))))
  ;; (flycheck-fringe-warning ((((background light)) (:background ,sol-base3 :foreground ,sol-yellow))
  ;;                           (((background dark)) (:background ,sol-base03 :foreground ,sol-yellow))))
  :hook
  (prog-mode-hook . global-flycheck-mode))
#+end_src

* Language Server Protocol (LSP)

** lsp-mode
#+begin_src emacs-lisp :results output silent
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :custom
  (lsp-enable-links nil "We don't rely on clickable links and they clutter the color")
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-enable-diagnostics nil)
  (lsp-file-watch-threshold 1500)
  (lsp-imenu-index-function #'lsp-imenu-create-categorized-index)
  (lsp-enable-file-watchers nil)
  :init
  ;; from https://github.com/minad/corfu/wiki#user-content-example-configuration-with-flex
  (with-eval-after-load 'orderless
    (setq lsp-completion-provider :none)
    (cl-defun --lsp-orderless-completion ()
      (setf (->> completion-category-defaults
                 (alist-get 'lsp-capf)
                 (alist-get 'styles))
            '(orderless flex basic)))
    (add-hook 'lsp-completion-mode-hook #'--lsp-orderless-completion))

  ;; (with-eval-after-load 'prescient
  ;;   (setq lsp-completion-provider :none)
  ;;   (cl-defun --lsp-prescient-completion ()
  ;;     (setf (->> completion-category-defaults
  ;;                (alist-get 'lsp-capf)
  ;;                (alist-get 'styles))
  ;;           '(prescient flex basic)))
  ;;   (add-hook 'lsp-completion-mode-hook #'--lsp-prescient-completion))
  :config
  ;; https://github.com/emacs-lsp/lsp-mode/issues/3577
  ;; (delete 'lsp-terraform lsp-client-packages)
  ;; this is necessary since `lsp-command-map' is not autoloadable
  (general-define-key
   :states 'normal
   :prefix my-default-evil-leader-key
   "l" lsp-command-map)
  ;; (lsp-mode-map
  ;;  :states 'normal
  ;;  :prefix my-default-evil-leader-key
  ;;   "l a a" 'lsp-execute-code-action))
  (with-eval-after-load 'lsp-headerline
   (set-face-attribute 'lsp-headerline-breadcrumb-path-error-face nil
                       :underline `(:color ,sol-red :style line))
   (set-face-attribute 'lsp-headerline-breadcrumb-symbols-error-face nil
                       :underline `(:color ,sol-red :style line))
   (set-face-attribute 'lsp-headerline-breadcrumb-path-hint-face nil
                       :underline `(:color ,sol-magenta :style line))
   (set-face-attribute 'lsp-headerline-breadcrumb-symbols-hint-face nil
                       :underline `(:color ,sol-magenta :style line))
   (set-face-attribute 'lsp-headerline-breadcrumb-path-info-face nil
                       :underline `(:color ,sol-blue :style line))
   (set-face-attribute 'lsp-headerline-breadcrumb-symbols-info-face nil
                       :underline `(:color ,sol-blue :style line))
   (set-face-attribute 'lsp-headerline-breadcrumb-path-warning-face nil
                       :underline `(:color ,sol-yellow :style line))
   (set-face-attribute 'lsp-headerline-breadcrumb-symbols-warning-face nil
                       :underline `(:color ,sol-yellow :style line)))
  ;; practically disabling it
  (custom-set-faces `(lsp-flycheck-warning-unnecessary-face
                      ((t (:foreground unspecified
                           :underline unspecified)))))
  (with-eval-after-load 'lsp-modeline
    (setq lsp-modeline-code-action-fallback-icon "Actions Available")))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package lsp-ui
  :after lsp
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-peek-enable t)
  :hook (lsp-mode-hook . lsp-ui-mode))

(use-package lsp-ui-peek
  :after lsp-ui
  :ensure nil
  :general
  (lsp-ui-peek-mode-map
   "C-j" 'lsp-ui-peek--select-next
   "C-k" 'lsp-ui-peek--select-prev
   "M-j" 'lsp-ui-peek--select-next
   "M-k" 'lsp-ui-peek--select-prev))

(use-package lsp-ui-doc
  :after lsp-ui
  :ensure nil
  :custom
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-position 'at-point)
  :hook
  (lsp-ui-doc-mode-hook . (lambda ()
                            (general-define-key
                             :keymaps 'lsp-command-map
                              "h h" (if lsp-ui-doc-mode
                                        'lsp-ui-doc-glance
                                      'lsp-describe-thing-at-point)))))
#+end_src

#+begin_src emacs-lisp :results output silent
(with-eval-after-load 'lsp-rust
  (customize-set-value 'lsp-rust-clippy-preference "on")
  (customize-set-value 'lsp-rust-cfg-test t))
#+end_src

Adding emojis into lsp-checked buffers causes it to explode, because
of [[https://github.com/emacs-lsp/lsp-mode/issues/2080]]. The following
snippet is a patch provided in the thread.

#+begin_src emacs-lisp :results output silent
(with-eval-after-load 'lsp-mode
  (defun lsp--column (&optional lbp)
    "Calculate current COLUMN as defined by the LSP spec. LBP defaults to `line-beginning-position'."
    (/ (- (length (encode-coding-region (or lbp (line-beginning-position))
                                        (point) 'utf-16 t))
          2)
       2))
  (defun lsp--move-to-character (character)
    "Move to CHARACTER abiding by the LSP spec."
    (save-restriction
      (cl-loop
       with lbp = (line-beginning-position)
       initially
       (narrow-to-region lbp (line-end-position))
       (move-to-column character)
       for diff = (- character
                     (lsp--column lbp))
       until (zerop diff)
       do (condition-case eob-err
              (forward-char (/ (if (> diff 0) (1+ diff) (1- diff)) 2))
            (end-of-buffer (cl-return eob-err))))
      (point)))

  (define-advice lsp--line-character-to-point (:override (line character) utf8-hack)
    "Return the point for character CHARACTER on line LINE."
    (or (lsp-virtual-buffer-call :line/character->point line character)
        (let ((inhibit-field-text-motion t))
          (lsp-save-restriction-and-excursion
            (goto-char (point-min))
            (forward-line line)
            (lsp--move-to-character character)))))
  (define-advice lsp--cur-position (:override () utf8-hack)
    "Make a Position object for the current point."
    (or (lsp-virtual-buffer-call :cur-position)
        (lsp-save-restriction-and-excursion
          (list :line (lsp--cur-line)
                :character (lsp--column))))))
#+end_src

** Consult-lsp
#+begin_src emacs-lisp :results output silent
(use-package consult-lsp
  :after (consult lsp)
  :commands (consult-lsp-diagnostics
             consult-lsp-symbols
             consult-lsp-file-symbols))
#+end_src
* Code Folding (Origami)
#+begin_src emacs-lisp :results output silent
(use-package origami
  :ensure (:host github :repo "gregsexton/origami.el")
  :after evil
  :defer 2
  :general
  (:states 'normal
   "zm" 'origami-close-all-nodes
   "zr" 'origami-open-all-nodes
   "zc" 'origami-close-node
   "zC" 'origami-close-node-recursively
   "zo" 'origami-open-node
   "zO" 'origami-open-node-recursively
   "za" 'origami-recursively-toggle-node
   "zj" 'origami-forward-fold
   "zk" #'(lambda () (interactive)
            (call-interactively 'origami-previous-fold)
            (call-interactively 'origami-next-fold))
   "[z" 'origami-previous-fold
   "]z" 'origami-next-fold)
  :hook
  (prog-mode-hook . origami-mode)
  :config
  (global-origami-mode))
#+end_src

* Rot13
Note that while the buffer will look rot13 encrypted, the final saved
file will not itself be encrypted.

#+begin_src emacs-lisp :results output silent
(evil-ex-define-cmd "rot[13]" 'toggle-rot13-mode)
#+end_src

* PlantUML mode
[[http://plantuml.com/index][Reference]]

#+begin_src emacs-lisp :results output silent
(use-package plantuml-mode
  :ensure (:host github :repo "skuro/plantuml-mode")
  :commands (plantuml-mode)
  :custom
  (plantuml-output-type "txt"
                        "Display using glorious text")
  (plantuml-default-exec-mode 'executable)
  :mode "\\.plantuml\\'"
  :init
  (with-eval-after-load 'org-src
    (cl-pushnew '("plantuml" . plantuml) org-src-lang-modes)))
#+end_src

#+begin_src emacs-lisp :results output silent
(customize-set-value 'org-plantuml-exec-mode 'plantuml)
(org-babel-do-load-languages 'org-babel-load-languages
                             (add-to-list 'org-babel-load-languages '(plantuml . t)))
#+end_src

* Edn format
This is closer to the json serialization/deserialization module.

#+begin_src emacs-lisp :results output silent
(use-package edn
  :ensure (:host github :repo "expez/edn.el")
  :commands (edn-read
             edn-print-string))
#+end_src

* Search Engine Mode
#+begin_src emacs-lisp :results output silent
(use-package engine-mode
  :commands defengine
  :init
  (evil-define-command --ddg-search (beg end _type)
    (interactive "<v>")
    (require 'engine-mode)
    (unless (boundp 'engine/search-duckduckgo)
      (defengine duckduckgo
        "https://duckduckgo.com/?q=%s"))
    (let* ((query-region (when (use-region-p)
                           (buffer-substring beg end)))
           (query-params (when (evil-ex-p)
                           evil-ex-argument))
           (query-args (list query-params query-region))
           (query (if (-none-p 'identity query-args)
                      (read-string "Search: " nil nil
                                   (thing-at-point 'word))
                    (s-join " " query-args))))
      (engine/search-duckduckgo query)))
  (evil-ex-define-cmd "ddg" '--ddg-search)
  :general
  (:states '(normal motion visual)
   "K" '--ddg-search))
#+end_src

* Link hinting
#+begin_src emacs-lisp :results output silent
(use-package link-hint
  :commands (link-hint-open-link
             link-hint-copy-link)
  :config
  (general-define-key
   :keymaps 'help-mode-map
   :states '(motion normal)
   "f" 'link-hint-open-link
   "y f" 'link-hint-copy-link))
#+end_src

* Highlight Indent Guides
#+begin_src emacs-lisp :results output silent
(use-package highlight-indent-guides
  :commands (highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-auto-enabled nil)
  :custom-face
  (highlight-indent-guides-character-face ((t (:inherit sol-superlight-foreground))))
  :hook
  ((prog-mode-hook . highlight-indent-guides-mode)))
#+end_src

#+begin_src emacs-lisp :results output silent
(general-define-key
 :states 'normal
 :prefix my-default-evil-leader-key
 "|" #'(lambda () (interactive)
         (require 'display-fill-column-indicator)
         (require 'highlight-indent-guides)
         (display-fill-column-indicator-mode 'toggle)
         (highlight-indent-guides-mode 'toggle)))
#+end_src

* Web mode
#+begin_src emacs-lisp :results output silent
(use-package web-mode
  :mode (("\\.svelte\\'" . web-mode)
         ("\\.vue\\'" . web-mode))
  :custom
  (web-mode-code-indent-offset 2)
  (web-mode-css-indent-offset 2)
  :commands web-mode
  :config
  (with-eval-after-load 'lsp-mode
    (add-hook 'web-mode-hook #'lsp-deferred)))
#+end_src

* Fill Function Argument
#+begin_src emacs-lisp :results output silent
(use-package fill-function-arguments
  :ensure (:host github :repo "davidshepherd7/fill-function-arguments")
  :commands (fill-function-arguments-dwim)
  :custom (fill-function-arguments-indent-after-fill t)
  :general
  (:states 'normal
   "g *" 'fill-function-arguments-dwim))
#+end_src

* Tree Sitter
#+begin_src emacs-lisp :results output silent
(use-package tree-sitter
  :commands (tree-sitter-hl-mode tree-sitter-mode)
  :hook ((tree-sitter-after-on-hook . tree-sitter-hl-mode))
  :custom-face
  (tree-sitter-hl-face:type.builtin ((t (:inherit 'tree-sitter-hl-face:keyword)))))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package tree-sitter-langs
  :after tree-sitter)
#+end_src

** Text objects
#+begin_src emacs-lisp :results output silent
(use-package evil-textobj-tree-sitter
  :ensure (:host github
           :repo "meain/evil-textobj-tree-sitter"
           :files (:defaults "queries"))
  :after tree-sitter
  :general
  (evil-outer-text-objects-map
   "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
  (evil-inner-text-objects-map
   "f" (evil-textobj-tree-sitter-get-textobj "function.inner")))
#+end_src

** Treesit (built-in mode)
#+begin_src emacs-lisp :results output silent
(use-package treesit-auto
  :disabled t
  :if (and (not (eq system-type 'windows-nt))
           (fboundp 'treesit-available-p)
           (treesit-available-p))
  :custom
  (treesit-auto-install 'prompt)
  :config
  (global-treesit-auto-mode))
#+end_src

* Scratch
Just do the scratch buffer simple and stupidly
#+begin_src emacs-lisp :results output silent
(setq initial-major-mode 'markdown-mode)
(--evil-ex-define-cmds-splits-and-tabs "sc[ratch]"
                                       #'(lambda () (switch-to-buffer "*scratch*"))
                                       "*scratch*")
#+end_src

* Macrostep
#+begin_src emacs-lisp :results output silent
(use-package macrostep
  :commands (macrostep-expand))
#+end_src

* Hydras
#+begin_src emacs-lisp :results output silent
(use-package hydra)
#+end_src

* Evaluation Result Overlay for Emacs Lisp
#+begin_src emacs-lisp :results output silent
(use-package eros
  :custom-face
  (eros-result-overlay-face ((t (:box nil
                                 :background unspecified
                                 :inherit shadow))))
  :config
  (eros-mode))
#+end_src

* Moonscript
#+begin_src emacs-lisp :results output silent
(use-package moonscript)
#+end_src

* Decide-mode
#+begin_src emacs-lisp :results output silent
(use-package decide
  :config
  (decide-mode))
#+end_src

* HCL-mode
#+begin_src emacs-lisp :results output silent
(use-package hcl-mode)
#+end_src

* Terraform mode
#+begin_src emacs-lisp :results output silent
(use-package terraform-mode
  :hook (terraform-mode-hook . terraform-format-on-save-mode)
  :config
  (with-eval-after-load 'tree-sitter
    (add-hook 'terraform-mode-hook #'tree-sitter-mode)))
#+end_src

* Docker
https://github.com/Silex/docker.el
#+begin_src emacs-lisp :results output silent
(use-package docker
  :commands docker
  :init
  (evil-ex-define-cmd "docker" #'docker))
#+end_src

* Dockerfile mode
#+begin_src emacs-lisp :results output silent
(use-package dockerfile-mode)
#+end_src

* mmm-mode
#+begin_src emacs-lisp :results output silent
(use-package mmm-mode
  :custom-face
  (mmm-default-submode-face ((t (:background unspecified)))))
#+end_src

* Proced
#+begin_src emacs-lisp :results output silent
;; (evil-ex-define-cmd "ps" 'proced)
#+end_src

* ObjC
#+begin_src emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
#+end_src

* Typescript
#+begin_src emacs-lisp :results output silent
(use-package typescript-mode
  :mode "\\.ts\\'"
  :config
  (with-eval-after-load 'tree-sitter
    (add-hook 'typescript-mode-hook 'tree-sitter-hl-mode)))
#+end_src

* Mermaid
Requires =mermaid-cli= to be installed:
#+begin_src sh
npm install -g @mermaid-js/mermaid-cli
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package mermaid-mode
  :if (and (bound-and-true-p --mermaid-cli-bin)
           (f-exists-p --mermaid-cli-bin))
  :custom
  (mermaid-mmdc-location --mermaid-cli-bin)
  :commands (mermaid-mode)
  :init
  (with-eval-after-load 'markdown-mode
    (add-to-list 'markdown-code-lang-modes '("mermaid" . mermaid-mode))))
#+end_src

** Ob-Mermaid
#+begin_src emacs-lisp :results output silent
(use-package ob-mermaid
  :after org
  :if (and (bound-and-true-p --mermaid-cli-bin)
           (f-exists-p --mermaid-cli-bin))
  :custom
  (ob-mermaid-cli-path --mermaid-cli-bin))
#+end_src

* Svg Tag Mode
#+begin_src emacs-lisp :results output silent
(use-package svg-lib
  :ensure (:host github :repo "rougier/svg-lib"))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package svg-tag-mode
   ;; depends on `svg-lib'
  :after svg-lib)
#+end_src

* Term
** Multi-Term
#+begin_src emacs-lisp :results output silent
(use-package multi-term
  :if (not (or (featurep 'vterm)
               (featurep 'multi-vterm)
               (eq system-type 'windows-nt)))
  :commands
  (multi-term))
#+end_src

* Vterm
https://github.com/akermu/emacs-libvterm

#+begin_src emacs-lisp :results output silent
(use-package vterm
  :if (not (eq system-type 'windows-nt))
  :custom
  (vterm-max-scrollback 100000 "maximum allowed without recompilation")
  (vterm-always-compile-module t)
  :config
  (evil-ex-define-cmd "term" #'vterm))
#+end_src

** Multi-Vterm
#+begin_src emacs-lisp :results output silent
(use-package multi-vterm
  :after vterm
  :if (not (eq system-type 'windows-nt))
  :general
  (general-define-key
   :keymaps 'project-prefix-map
   "s" 'multi-vterm-project) ;; overrides `project-shell'
  :config
  (evil-ex-define-cmd "term" #'multi-vterm))
#+end_src

* Kotlin Mode
#+begin_src emacs-lisp :results output silent
(use-package kotlin-mode
  :mode ("\\.kt\\'" . kotlin-mode))
#+end_src

* Swift Mode
#+begin_src emacs-lisp :results output silent
(use-package swift-mode
  :mode ("\\.swift\\'" . swift-mode))
#+end_src

* Shortdoc
#+begin_src emacs-lisp :results output silent
(when (fboundp 'shortdoc)
  (evil-ex-define-cmd "cheatsheet" 'shortdoc)
  (evil-ex-define-cmd "cs" 'shortdoc))
#+end_src

* dwim shell command
#+begin_src emacs-lisp :results output silent
(use-package dwim-shell-command
  :ensure (:host github :repo "xenodium/dwim-shell-command"))
#+end_src

* Earthfile
#+begin_src emacs-lisp :results output silent
(use-package earthfile-mode)
#+end_src

* Asciidoc
#+begin_src emacs-lisp :results output silent
(use-package adoc-mode)
#+end_src

* Scopeline
#+begin_src emacs-lisp :results output silent
(use-package scopeline
  :ensure (:host github :repo "meain/scopeline.el" :branch "master")
  :hook (prog-mode-hook . scopeline-mode)
  :blackout t
  :custom
  (scopeline-overlay-prefix " -- ")
  (scopeline-min-lines 0))
#+end_src

* Consult-Notes
#+begin_src emacs-lisp :results output silent
(use-package consult-notes
  :disabled t
  :after consult
  :if (bound-and-true-p --notes-folder)
  :commands
  (consult-notes
   consult-notes-search-in-all-notes)
  :custom
  (consult-notes-file-dir-sources
   `(("Deft" ?d ,--notes-folder)))
  :init
  (--evil-ex-define-cmds-splits-and-tabs
   "nn"
   #'consult-notes
   #'(lambda () (consult-notes))))
#+end_src

* Obsidian.el
#+begin_src emacs-lisp :results output silent
(use-package obsidian
  :custom
  (obsidian-include-hidden-files nil)
  (obsidian-links-use-vault-path t)
  ;; :hook
  ;; (obsidian-mode-hook . (lambda ()
  ;;                         (when (featurep 'aggressive-fill-paragraph)
  ;;                           (aggressive-fill-paragraph-mode 0))
  ;;                         (require 'visual-fill-column)
  ;;                         (visual-fill-column-mode 1)
  ;;                         (visual-line-mode 1)))
  :config
  ;; don't forget to `obsidian-specify-path'
  (global-obsidian-mode)
  (cl-defun --obsidian-find-buffer ()
    (interactive)
    (cl-letf ((symbol-function 'find-file) (symbol-function 'find-file-noselect))
      (obsidian-jump)))
  ;; (--evil-ex-define-cmds-splits-and-tabs
  ;;  "nn"
  ;;  #'obsidian-jump
  ;;  #'(lambda () (obsidian-jump)))
  (evil-ex-define-cmd "ni" #'obsidian-insert-link))
  ;; (with-eval-after-load 'org-capture
  ;;   (setq org-capture-templates
  ;;         (doct-add-to org-capture-templates
  ;;                      '("Obsidian append"
  ;;                        :keys "c"
  ;;                        :type plain
  ;;                        :function (lambda ()
  ;;                                    (let ((buffer(->> (obsidian-list-all-files)
  ;;                                                      (--completing-read "File: ")
  ;;                                                      (find-file-noselect))))
  ;;                                      (with-current-buffer buffer
  ;;                                        (goto-char (point-max)))))
  ;;                        :template "\n")))
#+end_src

* Chatgpt Shell
Don't forget to set =chatgpt-shell-openai-key= somewhere.

#+begin_src emacs-lisp :results output silent
(use-package chatgpt-shell
  :disabled t
  :ensure (:host github :repo "xenodium/chatgpt-shell")
  :after (dash)
  :commands chatgpt-shell-prompt
  :general
  (chatgpt-shell-mode-map
   "RET" nil
   "C-<return>" 'comint-send-input)
  :custom
  (chatgpt-shell-request-timeout 300)
  (chatgpt-shell-insert-queries-inline nil)
  (chatgpt-shell-history-path no-littering-var-directory)
  (chatgpt-shell-display-function
   #'(lambda (buf)
       (pop-to-buffer buf #'display-buffer-pop-up-window)))
  (chatgpt-shell-prompt-query-response-style 'shell)
  :hook
  (chatgpt-shell-mode-hook . (lambda ()
                               (when (bound-and-true-p parinfer-rust-mode)
                                 (parinfer-rust-mode 0))))
  :config
  (setq chatgpt-shell-system-prompt
        (-find-index (lambda (elem)
                       (string-equal "Programming" (car elem)))
                     chatgpt-shell-system-prompts))
  (setq chatgpt-shell-model-version
        (-find-index (lambda (elem)
                       (string-equal "gpt-4-turbo-preview" elem))
                     chatgpt-shell-model-versions))
  (setq chatgpt-shell-welcome-function
        #'(lambda (config)
            "Adapted from `shell-maker-welcome-function'"
           (format
            "Welcome to %s shell\n\n  Type %s and press %s for details.\n\n"
            (propertize (shell-maker-config-name config)
                        'font-lock-face 'font-lock-comment-face)
            (propertize "help" 'font-lock-face 'italic)
            (shell-maker--propertize-key-binding "-shell-submit" config))))
  :init
  (evil-define-command --evil-gpt-cmd (prompt)
    (interactive "<a>")
    (require 'chatgpt-shell)
    (if prompt
        (chatgpt-shell-send-to-buffer prompt)
      (chatgpt-shell)))
  (evil-ex-define-cmd "gpt" #'--evil-gpt-cmd))
#+end_src

* Xref
#+begin_src emacs-lisp :results output silent
(use-package xref
  :ensure nil
  :config
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read))
#+end_src

* ws-butler
#+begin_src emacs-lisp :results output silent
(use-package ws-butler
  :ensure t
  :custom
  (ws-butler-global-exempt-modes '())
  :config
  (ws-butler-global-mode))
#+end_src

* Realgud (and Gud)
#+begin_src emacs-lisp :results output silent
(use-package gud
  :ensure nil
  :mode ("\\.gdb\\'" . gdb-script-mode)
  :custom
  (gud-highlight-current-line t)
  :config
  (cl-defun --gdb-point-to-linespec ()
    "Generate a linespec compatible with gdb's `break' <FILENAME>:<LINE>"
    (interactive)
    (let* ((filename (file-name-nondirectory (buffer-file-name)))
           (line-num (line-number-at-pos (point) t))
           (linespec (format "%s:%s" filename line-num)))
      (kill-new linespec)
      (message "%s" linespec)))
  (cl-defun --gdb-linespec-to-point ()
    "From a linespec, find the originating file.
It's quite stupid at the moment, and assumes the line starts with `break'"
    (interactive)
    (require 'project)
    (let* ((line (thing-at-point 'line :no-properties))
           (_ (string-match "break \\(.*\\):\\([0-9]+\\)" line))
           (filename (match-string 1 line))
           (num (string-to-number (match-string 2 line)))
           (matches (seq-filter (lambda (f)
                                  (string-suffix-p filename f))
                                (project-files (project-current))))
           (match (if (length= matches 1)
                      (car matches)
                    (--completing-read "File: " matches :require-match t))))
      (find-file match)
      (goto-line num))))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package realgud
  :disabled t)
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package realgud-lldb
  :disabled t
  :after realgud
  :config
  (defalias 'realgud:lldb (symbol-function 'realgud--lldb)))
#+end_src

* COMMENT Democratize (documentation)
Commented because this doesn't work all too well for now and I'm not to sure
what the benefits are.
#+begin_src emacs-lisp :results output silent
(use-package xht
  :ensure (:type git :host nil :repo "https://git.sr.ht/~flandrew/xht"))

(use-package democratize
  :ensure (:type git :host nil :repo "https://git.sr.ht/~flandrew/democratize")
  :config
  (with-eval-after-load 'helpful
    (democratize-enable-examples-in-helpful))
  (democratize-enable-examples-in-help))
#+end_src

* Jinx (spell-checking)
#+begin_src emacs-lisp :results output silent
(use-package jinx
  :custom (jinx-languages "en_US"))
#+end_src

* Exec path from shell
#+begin_src emacs-lisp :results output silent
(use-package exec-path-from-shell
  :if (not (eq system-type 'windows-nt))
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Sudoedit
#+begin_src emacs-lisp :results output silent
(use-package sudo-edit
  :commands sudo-edit)
#+end_src

* Gptel
#+begin_src emacs-lisp :results output silent
(use-package gptel
  :ensure t ;; override :general
  :custom
  ;; prompts are under `gptel-directives'
  ;; (gptel-model "gpt-4-1106-preview")
  (gptel-display-buffer-action '(display-buffer-same-window))
  :general
  (gptel-mode-map
   "C-<return>" #'(lambda () (interactive)
                    (goto-char (point-max))
                    (gptel-send))
   "C-c RET" nil)
  :hook
  (gptel-mode-hook . (lambda ()
                       (visual-line-mode 1)
                       (require 'visual-fill-column)
                       (visual-fill-column-mode 1)))
  :init
  (evil-define-command --gptel-ex-command (_beg _end _type)
    (interactive "<v>")
    (if (use-region-p)
        (gptel-menu)
      (call-interactively 'gptel)))
  (evil-ex-define-cmd "gpt" #'--gptel-ex-command)
  (evil-ex-define-cmd "gptt" #'gptel-menu))
#+end_src

* Jam-mode
#+begin_src emacs-lisp :results output silent
(use-package jam-mode
  :ensure nil
  :mode "Jamroot"
  :load-path "lisp/3p")
#+end_src

* Rainbow Mode
#+begin_src emacs-lisp :results output silent
(use-package rainbow-mode)
#+end_src

* Buttercup                                                            :testing:
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/writing-tests.md
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/running-tests.md

#+begin_src emacs-lisp :results output silent
(use-package buttercup)
#+end_src

* ll-debug
#+begin_src emacs-lisp :results output silent
(use-package ll-debug
  :commands ll-debug-insert
  :custom
  (ll-debug-output-prefix "DEBUG-pangt-")
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "dp" #'ll-debug-insert)))
#+end_src

* Stripe
Zebra patterns for buffer
#+begin_src emacs-lisp :results output silent
(use-package stripe-buffer
  :commands stripe-buffer-mode)
#+end_src

* Dogears
#+begin_src emacs-lisp :results output silent
(use-package dogears
  :disabled t
  :demand t
  :commands (dogears-list dogears-remember dogears-go)
  :general
  (dogears-list-mode-map
   :states 'normal
   "RET" 'dogears-list-go
   "d d" 'dogears-list-delete)
  :init
  (evil-ex-define-cmd "fa" 'dogears-list)
  (evil-ex-define-cmd "fr" 'dogears-remember)
  (evil-ex-define-cmd "ff" 'dogears-go)
  (evil-ex-define-cmd "fn" 'dogears-forward)
  (evil-ex-define-cmd "fp" 'dogears-back)

  :config
  (dogears-mode)

  (when savehist-mode
    (add-to-list 'savehist-additional-variables 'dogears-list))

  ;; places to remember
  (add-to-list 'dogears-hooks 'xref-after-jump-hook)
  (add-to-list 'dogears-hooks 'bookmark-after-jump-hook)
  (add-to-list 'dogears-functions 'set-marker))
#+end_src

* Focus
#+begin_src emacs-lisp :results output silent
(use-package focus
  :commands focus-mode
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "fo[cus]" 'focus-mode)
    (evil-ex-define-cmd "fou" 'focus-unpin)
    (evil-ex-define-cmd "fop" 'focus-pin))
  (with-eval-after-load 'embark
    (with-eval-after-load 'general
      (general-define-key
       :keymaps 'embark-defun-map
        "f f" 'focus-mode
        "f u" 'focus-unpin
        "f p" 'focus-pin))))
#+end_src

* Ace-window
#+begin_src emacs-lisp :results output silent
(use-package ace-window
  :after evil
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :general
  (evil-window-map
   "SPC" 'ace-window))
#+end_src

* Pomm
#+begin_src emacs-lisp :results output silent
(use-package pomm
  :ensure t
  :commands (pomm
             pomm-start-with-context
             pomm-third-time
             pomm-third-time-start-with-context)
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "timer" 'pomm)))
#+end_src
