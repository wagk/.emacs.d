#+STARTUP: overview

[[https://necromuralist.github.io/posts/org-babel-cheat-sheet/][Org Babel Cheatsheet]]
[[https://org-babel.readthedocs.io/en/latest/eval/][Org Babel Reference Card]]
[[https://github.com/dfeich/org-babel-examples][Org Babel Examples]]

* Chatgpt Shell
Don't forget to set =chatgpt-shell-openai-key= somewhere.

#+begin_src emacs-lisp :results output silent
(use-package chatgpt-shell
  :disabled t
  :ensure (:host github :repo "xenodium/chatgpt-shell")
  :after (dash)
  :commands chatgpt-shell-prompt
  :general
  (chatgpt-shell-mode-map
   "RET" nil
   "C-<return>" 'comint-send-input)
  :custom
  (chatgpt-shell-request-timeout 300)
  (chatgpt-shell-insert-queries-inline nil)
  (chatgpt-shell-history-path no-littering-var-directory)
  (chatgpt-shell-display-function
   #'(lambda (buf)
       (pop-to-buffer buf #'display-buffer-pop-up-window)))
  (chatgpt-shell-prompt-query-response-style 'shell)
  :hook
  (chatgpt-shell-mode-hook . (lambda ()
                               (when (bound-and-true-p parinfer-rust-mode)
                                 (parinfer-rust-mode 0))))
  :config
  (setq chatgpt-shell-system-prompt
        (-find-index (lambda (elem)
                       (string-equal "Programming" (car elem)))
                     chatgpt-shell-system-prompts))
  (setq chatgpt-shell-model-version
        (-find-index (lambda (elem)
                       (string-equal "gpt-4-turbo-preview" elem))
                     chatgpt-shell-model-versions))
  (setq chatgpt-shell-welcome-function
        #'(lambda (config)
            "Adapted from `shell-maker-welcome-function'"
           (format
            "Welcome to %s shell\n\n  Type %s and press %s for details.\n\n"
            (propertize (shell-maker-config-name config)
                        'font-lock-face 'font-lock-comment-face)
            (propertize "help" 'font-lock-face 'italic)
            (shell-maker--propertize-key-binding "-shell-submit" config))))
  :init
  (evil-define-command --evil-gpt-cmd (prompt)
    (interactive "<a>")
    (require 'chatgpt-shell)
    (if prompt
        (chatgpt-shell-send-to-buffer prompt)
      (chatgpt-shell)))
  (evil-ex-define-cmd "gpt" #'--evil-gpt-cmd))
#+end_src

* COMMENT Democratize (documentation)
Commented because this doesn't work all too well for now and I'm not to sure
what the benefits are.
#+begin_src emacs-lisp :results output silent
(use-package xht
  :ensure (:type git :host nil :repo "https://git.sr.ht/~flandrew/xht"))

(use-package democratize
  :ensure (:type git :host nil :repo "https://git.sr.ht/~flandrew/democratize")
  :config
  (with-eval-after-load 'helpful
    (democratize-enable-examples-in-helpful))
  (democratize-enable-examples-in-help))
#+end_src

* Jinx (spell-checking)
#+begin_src emacs-lisp :results output silent
(use-package jinx
  :custom (jinx-languages "en_US"))
#+end_src

* Exec path from shell
#+begin_src emacs-lisp :results output silent
(use-package exec-path-from-shell
  :if (not (eq system-type 'windows-nt))
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Sudoedit
#+begin_src emacs-lisp :results output silent
(use-package sudo-edit
  :commands sudo-edit)
#+end_src

* Gptel
#+begin_src emacs-lisp :results output silent
(use-package gptel
  :ensure t ;; override :general
  :custom
  ;; prompts are under `gptel-directives'
  ;; (gptel-model "gpt-4-1106-preview")
  (gptel-display-buffer-action '(display-buffer-same-window))
  :general
  (gptel-mode-map
   "C-<return>" #'(lambda () (interactive)
                    (goto-char (point-max))
                    (gptel-send))
   "C-c RET" nil)
  :hook
  (gptel-mode-hook . (lambda ()
                       (visual-line-mode 1)
                       (require 'visual-fill-column)
                       (visual-fill-column-mode 1)))
  :init
  (evil-ex-define-cmd "gptt" #'gptel-menu)
  (with-eval-after-load 'evil
    (--evil-define-splits "gpt" 'gptel)))
#+end_src

* Jam-mode
#+begin_src emacs-lisp :results output silent
(use-package jam-mode
  :ensure nil
  :mode "Jamroot"
  :load-path "lisp/3p")
#+end_src

* Buttercup                                                         :testing:
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/writing-tests.md
https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/running-tests.md

#+begin_src emacs-lisp :results output silent
(use-package buttercup)
#+end_src

* ll-debug
#+begin_src emacs-lisp :results output silent
(use-package ll-debug
  :commands ll-debug-insert
  :custom
  (ll-debug-output-prefix "DEBUG-pangt-")
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "dp" #'ll-debug-insert)))
#+end_src

* Stripe
Zebra patterns for buffer
#+begin_src emacs-lisp :results output silent
(use-package stripe-buffer
  :commands stripe-buffer-mode)
#+end_src

* Dogears
#+begin_src emacs-lisp :results output silent
(use-package dogears
  :disabled t
  :demand t
  :commands (dogears-list dogears-remember dogears-go)
  :general
  (dogears-list-mode-map
   :states 'normal
   "RET" 'dogears-list-go
   "d d" 'dogears-list-delete)
  :init
  (evil-ex-define-cmd "fa" 'dogears-list)
  (evil-ex-define-cmd "fr" 'dogears-remember)
  (evil-ex-define-cmd "ff" 'dogears-go)
  (evil-ex-define-cmd "fn" 'dogears-forward)
  (evil-ex-define-cmd "fp" 'dogears-back)

  :config
  (dogears-mode)

  (when savehist-mode
    (add-to-list 'savehist-additional-variables 'dogears-list))

  ;; places to remember
  (add-to-list 'dogears-hooks 'xref-after-jump-hook)
  (add-to-list 'dogears-hooks 'bookmark-after-jump-hook)
  (add-to-list 'dogears-functions 'set-marker))
#+end_src

* Focus
#+begin_src emacs-lisp :results output silent
(use-package focus
  :commands focus-mode
  :init
  (with-eval-after-load 'evil
    ;; (evil-define-command --focus-maybe-pin (pin)
    ;;   (interactive "<!>")
    ;;   (focus-mode 1)
    ;;   (when pin (focus-pin)))
    ;; (evil-ex-define-cmd "foc[us]" '--focus-maybe-pin)
    (evil-ex-define-cmd "fo[cus]" 'focus-mode)
    (evil-ex-define-cmd "fou" 'focus-unpin)
    (evil-ex-define-cmd "fop" 'focus-pin))
  (with-eval-after-load 'embark
    (with-eval-after-load 'general
      (general-define-key
       :keymaps 'embark-defun-map
        "f f" 'focus-mode
        "f u" 'focus-unpin
        "f p" 'focus-pin))))
#+end_src

#+begin_src emacs-lisp :results output silent
(use-package lsp-focus
  :ensure t
  :after (lsp focus)
  :hook
  (focus-mode-hook . #'lsp-focus-mode))
#+end_src

* Ace-window
#+begin_src emacs-lisp :results output silent
(use-package ace-window
  :after evil
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :general
  (evil-window-map
   "SPC" 'ace-window))
#+end_src

* Pomm
#+begin_src emacs-lisp :results output silent
(use-package pomm
  :ensure t
  :commands (pomm
             pomm-start-with-context
             pomm-third-time
             pomm-third-time-start-with-context)
  :init
  (with-eval-after-load 'evil
    (evil-ex-define-cmd "timer" 'pomm)))
#+end_src
